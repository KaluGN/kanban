{"version":3,"sources":["KanBanGhost.js","KanbanBoard.js","KanbanCard.js","KanbanLane.js"],"names":["KanbanGhostCard","board","lane","undefined","x","y","width","offsetX","offsetY","display","create","html","document","createElement","card","innerHTML","grabWidth","height","grabHeight","grabOffsetX","grabOffsetY","setStyles","style","transform","left","top","KanbanBoard","selector","lanes","cards","heldCard","heldCardMoved","createGhost","addListeners","container","querySelector","appendChild","ghost","window","addEventListener","e","mouseUp","mouseMove","clientX","clientY","body","cardUp","push","onMouseEnterLane","mouseEnterLane","laneID","onMouseEnter","mouseEnterCard","onMouseDown","offX","offY","mouseDownOnCard","putCardInLane","id","find","cardID","findLane","append","findCard","cardID1","cardID2","card1","card2","appendCardAroundCard","putCardAroundCard","grab","drop","hide","moved","hold","show","move","KanbanCard","content","template","listen","mouseenter","mousedown","classList","add","remove","downArea","target","getBoundingClientRect","cardArea","KanbanLane","title","toggle","movedToCardAndLane","parentElement","nextSibling","insertBefore"],"mappings":"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","file":"scripts.js","sourcesContent":["/** A Kanban Ghost Card */\nclass KanbanGhostCard {\n   /**\n    * Create a new ghost card\n    * @param {KanBanBoard} board - the board to add to\n    **/\n   constructor(board) {\n      this.board = board\n      this.lane = undefined\n      this.x = 0\n      this.y = 0\n      this.width = 0\n      this.offsetX = 0\n      this.offsetY = 0\n      this.display = 'none'\n      this.create()\n   }\n\n   /**\n   * Create a new ghost card html\n   * @private\n   **/\n   create() {\n      this.html = document.createElement('ghost')\n   }\n\n   /**\n   * Copy the contents of the grabbed card to the ghost\n   * @param {KanbanCard} card - the card to copy\n   **/\n   grab(card) {\n      this.html.innerHTML = card.html.innerHTML\n      this.width = card.grabWidth\n      this.height = card.grabHeight\n      this.offsetX = card.grabOffsetX\n      this.offsetY = card.grabOffsetY\n      this.setStyles()\n   }\n\n   /**\n   * Show the ghost card\n   **/\n   show() {\n      this.display = 'block'\n      this.setStyles()\n   }\n\n   /**\n   * Hide the ghost card\n   **/\n   hide() {\n      this.display = 'none'\n      this.setStyles()\n   }\n\n   /**\n   * Move the ghost card\n   * @param {number} x - x coordinate\n   * @param {number} y - y coordinate\n   **/\n   move(x, y) {\n      this.x = x\n      this.y = y\n      this.setStyles()\n   }\n\n   /**\n   * Sets the styles\n   * @private\n   **/\n   setStyles() {\n      this.html.style.transform = `translateX(${this.x}px) translateY(${this.y}px)`\n      this.html.style.width = this.width + 'px'\n      this.html.style.left = this.offsetX + 'px'\n      this.html.style.top = this.offsetY + 'px'\n      this.html.style.display = this.display\n   }\n}\n","/** A Kanban Board */\nclass KanbanBoard {\n   /**\n    * Create a kanban board\n    * @param {string} selector - the selector for the container\n    **/\n   constructor(selector) {\n      this.selector = selector\n      this.lanes = []\n      this.cards = []\n      this.heldCard = undefined\n      this.heldCardMoved = false\n\n      this.html = {}\n      this.create()\n      this.createGhost()\n      this.addListeners()\n   }\n\n   /**\n    * Creates the board, appends to the container\n    * @private\n    **/\n   create() {\n      this.html.container = document.querySelector(this.selector)\n      this.html.board = document.createElement('kanban')\n      this.html.container.appendChild(this.html.board)\n      this.html.cards = []\n   }\n\n   /**\n    * Creates the Ghost element that will follow the cursor\n    * @private\n    **/\n   createGhost() {\n      this.ghost = new KanbanGhostCard(this.html.board)\n      this.html.board.appendChild(this.ghost.html)\n   }\n\n   /**\n    * Adds event listeners for global events\n    * @private\n    **/\n   addListeners() {\n      window.addEventListener('mouseup', (e) => { this.mouseUp() })\n      window.addEventListener('mousemove', (e) => { this.mouseMove(e.clientX, e.clientY) })\n      document.body.addEventListener('blur', (e) => { this.cardUp() })\n   }\n\n   /**\n    * Adds a lane to the board\n    * @param {KanbanLane} lane - the kanban lane to add\n    **/\n   addLane(lane) {\n      this.lanes.push(lane)\n      lane.onMouseEnterLane = (lane) => { this.mouseEnterLane(lane) }\n      this.html.board.appendChild(lane.html.lane)\n   }\n\n   /**\n    * Adds a card to the board\n    * @param {KanbanCard} card - the kanban card to add\n    * @param {laneID} laneID - lane to add in\n    **/\n   addCard(card, laneID) {\n      this.cards.push(card)\n      card.onMouseEnter = (card) => { this.mouseEnterCard(card) }\n      card.onMouseDown = (card, offX, offY) => { this.mouseDownOnCard(card, offX, offY) }\n      this.putCardInLane(card.id, laneID)\n   }\n\n   /**\n    * Finds a lane on the board\n    * @param {string} laneID - the lane ID of the lane to find\n    **/\n   findLane(laneID) {\n      return this.lanes.find((e) => { return e.id == laneID })\n   }\n\n   /**\n    * Finds a card on the board\n    * @param {string} cardID - the card ID of the card to find\n    **/\n   findCard(cardID) {\n      return this.cards.find((e) => { return e.id == cardID })\n   }\n\n   /**\n    * Moves a card to a lane at the end\n    * @param {string} cardID - the card ID to move\n    * @param {string} laneID - the lane ID to put the card in\n    **/\n   putCardInLane(cardID, laneID){\n      this.ghost.lane = this.findLane(laneID)\n      this.findLane(laneID).append(this.findCard(cardID))\n   }\n\n   /**\n    * Puts a card around a card\n    * @param {string} cardID1 - the card ID to move\n    * @param {string} cardID2 - the card ID to put around\n    **/\n   putCardAroundCard(cardID1, cardID2){\n      var card1 = this.findCard(cardID1)\n      var card2 = this.findCard(cardID2)\n      if(card1.id == card2.id) return\n      this.findLane(card2.lane).appendCardAroundCard(card1, card2)\n   }\n\n   /**\n    * Fires when the mouse enters a lane\n    * @param {KanbanLane} lane - the lane the mouse entered\n    * @private\n    **/\n   mouseEnterLane(lane) {\n      if(this.heldCard) {\n         this.putCardInLane(this.heldCard.id, lane.id)\n      }\n   }\n\n   /**\n    * Fires when the mouse enters a card\n    * @param {KanbanCard} card - the card the mouse entered\n    * @private\n    **/\n   mouseEnterCard(card) {\n      if(this.heldCard) {\n         this.putCardAroundCard(this.heldCard.id, card.id)\n      }\n   }\n\n   /**\n    * Fires when the mouse presses down on a card\n    * @param {KanbanCard} card - the card the mouse clicked\n    * @private\n    **/\n   mouseDownOnCard(card) {\n      this.heldCard = card\n      this.heldCard.grab()\n      this.ghost.grab(card)\n   }\n\n   /**\n    * Fires when the mouse comes up\n    * @private\n    **/\n   mouseUp() {\n      this.heldCard.drop()\n      this.ghost.hide()\n      this.heldCard = undefined\n   }\n\n   /**\n    * Fires when the mouse moves\n    * @param {number} x - the mouse x pos\n    * @param {number} y - the mouse y pos\n    * @private\n    **/\n   mouseMove(x, y) {\n      if(this.heldCard) {\n         if(!this.heldCard.moved) {\n            this.heldCard.hold()\n            this.ghost.show()\n         }\n         this.ghost.move(x, y)\n      }\n   }\n}\n","/** A Kanban Card */\nclass KanbanCard {\n   /**\n    * Create a new kanban card\n    * @param {string} id - the selector for the container\n    * @param {any} content - content to be put in the card\n    * @param {function} template - the template to use on the card\n    **/\n   constructor(id, content, template){\n      this.id = id\n      this.lane = undefined\n      this.content = content\n      this.template = template\n      this.html = {}\n\n      this.create()\n      this.listen()\n   }\n\n   /**\n    * Creates the html element\n    * @private\n    **/\n   create() {\n      this.html = document.createElement('card')\n      this.html.innerHTML = this.template(this.content)\n   }\n\n   /**\n    * Listens for card events\n    * @private\n    **/\n   listen() {\n      this.html.addEventListener('mouseenter', (e) => { this.mouseenter(e) })\n      this.html.addEventListener('mousedown', (e) => { this.mousedown(e) })\n   }\n\n   /**\n    * what to do when grabbed\n    * @private\n    **/\n   grab() {\n      this.moved = false\n   }\n\n   /**\n    * what to do when held\n    * @private\n    **/\n   hold() {\n      this.moved = true\n      this.html.classList.add('held')\n   }\n\n   /**\n    * what to do when dropped\n    * @private\n    **/\n   drop() {\n      this.html.classList.remove('held')\n   }\n\n   /**\n    * called when mouse enters\n    * @private\n    **/\n   mouseenter() {\n      this.onMouseEnter(this)\n   }\n\n   /**\n    * called when mouse pressed\n    * @private\n    **/\n   mousedown(e) {\n      var downArea = e.target.getBoundingClientRect()\n      var cardArea = this.html.getBoundingClientRect()\n      this.grabWidth = cardArea.width\n      this.grabHeight = cardArea.height\n      this.grabOffsetX = -e.offsetX - (downArea.left - cardArea.left)\n      this.grabOffsetY = -e.offsetY - (downArea.top - cardArea.top)\n      this.onMouseDown(this)\n   }\n}\n","/** A Kanban Lane */\nclass KanbanLane {\n   /**\n    * Create a new ghost card\n    * @param {string} id - the id of the lane\n    * @param {string} content - the content to put in the title\n    * @param {function} template - the template function for the title\n    **/\n   constructor(id, content, template) {\n      this.id = id\n      this.content = content\n      this.template = template\n      this.html = {\n         lane: undefined,\n         title: undefined,\n         cards: undefined\n      }\n\n      this.create()\n      this.listen()\n   }\n\n   /**\n    * Creates the lane html\n    * @private\n    */\n   create() {\n      this.html.lane = document.createElement('lane')\n      this.html.title = document.createElement('lane-title')\n      this.html.cards = document.createElement('lane-cards')\n\n      this.html.lane.id = this.id\n      this.html.title.innerHTML = this.template(this.content)\n      this.html.lane.appendChild(this.html.title)\n      this.html.lane.appendChild(this.html.cards)\n   }\n\n   /**\n    * Listens for events\n    * @private\n    */\n   listen() {\n      this.html.cards.addEventListener('mouseenter', (e) => { this.mouseenter(e) })\n      this.html.title.addEventListener('click', (e) => { this.toggle(e) })\n   }\n\n   /**\n    * What to do when mouse enters\n    * @private\n    */\n   mouseenter(e) {\n      this.onMouseEnterLane(this)\n   }\n\n   /**\n    * Toggle the lane open or minimized\n    */\n   toggle() {\n      this.html.lane.classList.toggle('collapse')\n   }\n\n   /**\n    * Listens for events\n    * @private\n    * @param {KanbanCard} card - the card to append\n    */\n   append(card) {\n      card.lane = this.id\n      if(!card.movedToCardAndLane) this.html.cards.appendChild(card.html)\n      card.movedToCardAndLane = false\n   }\n\n   /**\n    * Listens for events\n    * @private\n    * @param {KanbanCard} card1 - the card to append\n    * @param {KanbanCard} card2 - the card to look for a position around\n    */\n   appendCardAroundCard(card1, card2) {\n      card1.lane = this.id\n      card1.movedToCardAndLane = card1.html.parentElement != card2.html.parentElement\n      if(!card2.html.nextSibling && !card1.movedToCardAndLane){\n         this.append(card1)\n         return\n      }\n\n      this.html.cards.insertBefore(card1.html, card2.html)\n   }\n}\n"]}